security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
          - { path: ^/admin, roles: ROLE_SUPER_ADMIN }

    role-hierarchy:
        ROLE_PRODUCT_ADMIN: ROLE_USER
        ROLE_ADMIN: ROLE_PRODUCT_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

when@test:
    security:
        password_hashers:
            # Par défaut, les hachages de mots de passe consomment beaucoup de ressources et prennent du temps. Ceci est
            # important to generate secure password hashes. Dans les tests, cependant, secure hashes
            # ne sont pas importants, gaspillent des ressources et augmentent les temps de test. Les éléments suivants
            # réduit le facteur de travail aux valeurs les plus basses possibles.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Valeur la plus faible possible pour bcrypt
                time_cost: 3  # Valeur la plus basse possible pour argon
                memory_cost: 10 # Valeur la plus faible possible pour argon
